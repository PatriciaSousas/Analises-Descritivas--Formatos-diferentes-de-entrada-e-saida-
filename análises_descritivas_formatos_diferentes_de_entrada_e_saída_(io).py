# -*- coding: utf-8 -*-
"""Análises Descritivas -Formatos diferentes de entrada e saída (IO)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMg-DUA0NF8ZAd_Kpo5tB4vhDjHt5uwV

##### Análise de uma escola de programação com diferentes cursos e diversos alunos e alunas. Meu objetivo será realizar análises descritivas dessa escola, que será criada a partir das  entradas de dados que vou trazer(Json, HTML, CSV, arquivos excel e Banco de dados)

##Import das Bibliotecas
"""

import pandas as pd
import numpy as np
import html5lib
import seaborn as sns
!pip3 install html5lib 
!pip3 install lxml
!pip3 install sqlalchemy

"""## Unificando os Dataframes com os nomes dos alunos
---
"""

nome_masculino = pd.read_json('https://servicodados.ibge.gov.br/api/v1/censos/nomes/ranking?qtd=20&sexo=f')   #Trago os dados HTML
nome_feminino = pd.read_json('https://servicodados.ibge.gov.br/api/v1/censos/nomes/ranking?qtd=20&sexo=m')

print('Quantidade total de pessoas'  + str(len(nome_feminino) + len(nome_masculino)))                        #Quero entender quantos dados tem nas duas variaveis

frames_unificados=[nome_feminino,nome_masculino]

nomes= pd.concat(frames_unificados)['nome'].to_frame()                                           #uni os dois dataframes especificando apenas a coluna nome que eu preciso
nomes

"""## Incluindo ID dos alunos e dominios de e-mails
---
"""

total_alunos= len(nomes_alunos)                                           
total_alunos

nomes_alunos["id_aluno"] =  np.random.permutation(total_alunos) + 1               #inclui uma coluna com  ID aleatorio no meu dataset para cada aluno
nomes_alunos

dominios = ['@dominiodoemmail.com.br', '@servicodoemail.com']                    #inclui uma coluna com os dominios aleatorios para cada aluno
nomes_alunos['dominio'] = np.random.choice(dominios, total_alunos)

nomes_alunos['email'] = nomes.nome.str.cat(nomes.dominios).str.lower()      
nomes                                                                          #concatenei os nomes com os dominios

nomes_alunos.sample(10)

"""## Criando a tabela Cursos
---
"""

url= 'http://tabela-cursos.herokuapp.com/index.html'                 #faço a leitura desse  html
cursos=pd.read_html(url)

type(cursos)                                                        # vejo o formato desses dados

cursos= cursos[0]                                                   #transformo eles em um dataframe
cursos

cursos = cursos.rename(columns={'Nome do curso':'Nome_cursos'})     #renomeando e incluindo ID no meu dataframe

cursos['id'] = cursos.index + 1
cursos.head()

cursos = cursos.set_index('id')
cursos.head()

"""### Matriculando os alunos nos cursos
---
"""

nomes_alunos['matriculas'] = np.ceil(np.random.exponential(size=total_alunos) * 1.5).astype(int)  #inclui um numero de cursos aleatorios para cada aluno, onde no minimo um aluno participar de 1 curso
nomes_alunos.sample(5)

todas_matriculas = []                                                       #faço uma varredura de quantas matriculas eu tenho em cada nome, criando um loop que atribui o curso de forma aleatorio de acordo com a quantidade de curso que cada aluno faz 
x = np.random.rand(20)
prob = x / sum(x)

for index, row in nomes_alunos.iterrows():                                #inclui dentro de um dataframe usando numpy os cursos aleatorios ligados a cada curso e aluno
  id = row.id_aluno
  matriculas = row.matriculas
  for i in range(matriculas):
    mat = [id, np.random.choice(cursos.index, p = prob)]
    todas_matriculas.append(mat)

matriculas = pd.DataFrame(todas_matriculas, columns = ['id_aluno', 'id_curso'])
matriculas.head(5)

matriculas_por_curso = matriculas.groupby('id_curso').count().join(cursos['Nome_cursos']).rename(columns= {'id_aluno' : 'Quantidade_alunos'})

"""### Criando o banco SQL
---

Usando o SQLAlchemy  que é uma biblioteca de mapeamento objeto-relacional SQL em código aberto desenvolvido para a linguagem de programação Python vou criar um data frame em um banco de dados local.
"""

from sqlalchemy import create_engine, MetaData, Table                         #import as libs create_engine, MetaData e Table

engine = create_engine('sqlite:///:memory:')                                  #passo um parametro para as informações serem salvas em uma memória local

matriculas_por_curso.to_sql('matriculas', engine)                             #Transformo esse dataframe em um sql

print(engine.table_names())



"""### Buscando dados do banco sql
---
"""

query = 'select * from matriculas where quantidade_de_alunos < 20'

pd.read_sql(query, engine)                                                                      #ele me traz id_curso, quantidade_alunos, nome_curso e a listagem de cursos por alunos

pd.read_sql_table('matriculas_por_curso', engine, columns=['nomes_alunos', 'quantidade_de_alunos'])  #filtro as colunas de alunos e quantidade de alunos

muitas_matriculas = muitas_matriculas.query('quantidade_de_alunos > 80')                             #apenas para cursos com mais de 80 inscritos e atribuir o resultado a uma variável.
muitas_matriculas